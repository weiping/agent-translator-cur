# 工具开发指南

## 工具开发标准流程 (v0.4.0更新)

基于 [src/tools/](mdc:src/tools/) 目录下的现有工具实现模式：

### 1. 自定义工具接口
遵循 [src/tools/fileReader.ts](mdc:src/tools/fileReader.ts) 和 [src/tools/urlFetcher.ts](mdc:src/tools/urlFetcher.ts) 的标准结构：

```typescript
export const newTool: Tool = {
  inputSchema: z.object({
    // 定义参数验证规则
  }),

  async prompt(tool: NewToolInput): Promise<string> {
    // 生成给LLM的提示信息
  },

  async *call(input: NewToolInput, context): AsyncGenerator<ToolResult, void, unknown> {
    try {
      // 实现工具逻辑
      yield {
        type: 'success',
        data: result
      };
    } catch (error: any) {
      yield {
        type: 'error',
        data: { error: error.message }
      };
    }
  }
};
```

### 2. AI SDK工具集成 (v0.4.0新增)
在 [src/utils/llm.ts](mdc:src/utils/llm.ts) 中集成工具，支持状态回调：

```typescript
const enhancedAiTools = {
  newTool: tool({
    description: '工具功能描述',
    parameters: z.object({
      param: z.string().describe('参数描述')
    }),
    execute: async ({ param }) => {
      // 🆕 v0.4.0新增：状态回调支持
      callbacks?.onStatusUpdate(`正在执行工具: ${param}`);
      callbacks?.onToolCall('newTool', { param });
      
      const abortController = new AbortController();
      const context = { 
        abortController, 
        options: { isNonInteractiveSession: true } 
      };
      
      try {
        const generator = newTool.call({ param }, context);
        const result = await generator.next();
        
        if (result.value?.type === 'error') {
          const error = result.value.data.error;
          callbacks?.onToolResult('newTool', { error });
          throw new Error(error);
        }
        
        const toolResult = result.value?.data || { error: '工具执行失败' };
        callbacks?.onToolResult('newTool', toolResult);
        callbacks?.onStatusUpdate('工具执行完成');
        
        return toolResult;
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : '工具执行失败';
        callbacks?.onToolResult('newTool', { error: errorMsg });
        throw error;
      }
    }
  })
};
```

### 3. 工具回调处理 (v0.4.0新功能)
实现 `ToolCallbacks` 接口以支持实时状态显示：

```typescript
export interface ToolCallbacks {
  onStatusUpdate: (status: string) => void;    // 状态更新回调
  onToolCall: (toolName: string, args: any) => void;      // 工具调用回调
  onToolResult: (toolName: string, result: any) => void;  // 工具结果回调
}
```

### 4. 导出工具
在 [src/tools/index.ts](mdc:src/tools/index.ts) 中添加导出

## 最佳实践 (v0.4.0更新)

### 状态监控 🆕
- 在工具执行关键步骤时调用 `callbacks?.onStatusUpdate()`
- 提供用户友好的状态描述信息
- 包含执行进度和当前操作的详细说明

### 结果回调 🆕
- 使用 `callbacks?.onToolCall()` 记录工具调用开始
- 使用 `callbacks?.onToolResult()` 记录执行结果
- 为成功和失败情况提供不同的结果格式

### 错误处理
- 使用 try-catch 包装核心逻辑
- 通过回调机制报告详细错误信息
- 支持 AbortController 中断操作

### 参数验证
- 使用 Zod 进行严格的参数验证
- 提供清晰的参数描述
- 检查必需和可选参数

### 性能考虑
- 支持大文件处理的流式读取
- 实现合理的超时机制
- 避免内存泄漏

### 安全性
- 验证文件路径和URL格式
- 限制支持的文件类型
- 防止路径遍历攻击

## 现有工具参考 (v0.4.0状态)

### 文件读取工具 (fileReader)
- ✅ 支持多种文本格式 (.md, .txt, .html, .json, .csv, .xml, .yml)
- ✅ 路径验证和扩展名检查
- ✅ 友好的错误提示
- 🆕 实时状态显示和结果回调

### URL抓取工具 (urlFetcher)
- ✅ HTTP/HTTPS协议支持
- ✅ HTML到Markdown转换
- ✅ 网络错误处理
- 🆕 抓取进度显示和结果摘要

## 测试建议

### 功能测试
- 正常输入的成功处理
- 异常输入的错误处理
- 边界条件测试

### 状态回调测试 🆕
- 验证状态更新的实时性
- 测试工具调用和结果记录的准确性
- 确认错误状态的正确传播

### 集成测试
- AI工具调用流程
- 多步工具调用场景
- 错误恢复机制
- 🆕 工具调用历史记录的完整性
