---
description: "CLI聊天界面设计模式和实现规范"
---

# CLI 聊天界面设计规范

## 界面布局结构
遵循Gemini-CLI的经典四层布局设计：

```
┌─────────────────────────────────┐
│ Header (顶部欢迎消息)             │
├─────────────────────────────────┤
│ MessageHistory (中间消息历史)     │
│ 👤 用户消息                      │
│ 🤖 系统回复                      │
├─────────────────────────────────┤
│ InputBox (底部输入框)             │
├─────────────────────────────────┤
│ StatusBar (状态栏)               │
└─────────────────────────────────┘
```

## 组件设计规范

### Header组件
- 使用圆框边框 (`borderStyle="round"`)
- 显示应用名称和版本号
- 颜色：cyan，加粗显示

### MessageHistory组件
- **用户消息标识**：👤 + cyan颜色
- **系统消息标识**：🤖 + green/white颜色
- **时间戳格式**：使用 `toLocaleTimeString()`
- **空状态提示**："开始您的第一次对话..."

### InputBox组件
- 圆框边框包围整个输入区域
- 提示符：`> ` (cyan色加粗)
- 光标指示：`_` (gray色)
- Loading状态：显示"(正在处理...)"

### StatusBar组件
- **错误显示**：❌ + red颜色
- **正常状态**：gray色淡化显示
- **默认提示**："准备就绪 - 输入消息并按回车发送"

## 交互流程设计

### 消息处理流程
1. **用户输入** → 检查非空 → 添加用户消息
2. **设置Loading** → 更新状态栏 → 显示处理中
3. **模拟处理** → 异步等待 → 添加系统回复
4. **完成状态** → 清空输入框 → 更新状态

### 键盘事件处理
- **Enter键**：提交消息 (仅当输入非空时)
- **Backspace键**：删除字符 + 更新光标位置
- **普通输入**：追加字符 + 更新光标位置
- **Loading期间**：禁用所有输入

## 状态管理模式

### AppState接口设计
```typescript
interface AppState {
  messages: Message[];      // 消息历史
  currentInput: string;     // 当前输入 (已废弃，由InputBox内部管理)
  isLoading: boolean;       // 加载状态
  statusMessage: string;    // 状态消息
  error?: string;          // 错误信息
}
```

### Message接口设计
```typescript
interface Message {
  id: string;              // 唯一标识 (使用时间戳)
  content: string;         // 消息内容
  timestamp: Date;         // 发送时间
  type: 'user' | 'system'; // 消息类型
}
```

## 视觉设计原则
- **一致性**：所有边框使用相同的cyan色调
- **层次感**：通过颜色和图标区分用户/系统消息
- **反馈性**：Loading状态和错误状态有明确视觉指示
- **简洁性**：避免过多装饰，保持终端界面的简洁美观
