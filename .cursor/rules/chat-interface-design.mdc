
# CLI 聊天界面设计规范 (v0.4.0更新)

## 界面布局结构
遵循Gemini-CLI的经典四层布局设计：

```
┌─────────────────────────────────┐
│ Header (顶部欢迎消息)             │
├─────────────────────────────────┤
│ MessageHistory (中间消息历史)     │
│ 👤 用户消息                      │
│ 🤖 系统回复                      │
│ 🔧 工具调用 (v0.4.0新增)         │
│ 📋 工具结果 (v0.4.0新增)         │
├─────────────────────────────────┤
│ InputBox (底部输入框)             │
├─────────────────────────────────┤
│ StatusBar (状态栏 + 工具状态)     │
└─────────────────────────────────┘
```

## 组件设计规范 (v0.4.0更新)

### Header组件
- 使用圆框边框 (`borderStyle="round"`)
- 显示应用名称和版本号 (当前: v0.4.0)
- 颜色：cyan，加粗显示

### MessageHistory组件 🆕 (v0.4.0增强)
#### 消息类型支持
- **用户消息**：👤 用户 (cyan颜色)
- **AI回复**：🤖 AI (green颜色) 
- **工具调用**：🔧 工具调用 (yellow颜色) 🆕
- **工具结果**：📋 工具结果 (magenta颜色) 🆕

#### 工具消息格式
```typescript
// 工具调用消息示例
const toolCallMessage = {
  type: 'tool-call',
  content: '调用工具: fileReader\n参数: {"filePath": "test.md"}',
  toolName: 'fileReader',
  toolArgs: { filePath: 'test.md' }
};

// 工具结果消息示例  
const toolResultMessage = {
  type: 'tool-result',
  content: '✅ 成功读取文件: test.md\n内容长度: 1024 字符',
  toolName: 'fileReader'
};
```

#### 消息显示逻辑
```typescript
const getMessageDisplay = (message: Message) => {
  switch (message.type) {
    case 'user':
      return { icon: '👤', color: 'cyan', label: '用户' };
    case 'system':
      return { icon: '🤖', color: 'green', label: 'AI' };
    case 'tool-call':      // 🆕 v0.4.0
      return { icon: '🔧', color: 'yellow', label: '工具调用' };
    case 'tool-result':    // 🆕 v0.4.0
      return { icon: '📋', color: 'magenta', label: '工具结果' };
    default:
      return { icon: '💬', color: 'gray', label: '消息' };
  }
};
```

### InputBox组件
- 圆框边框包围整个输入区域
- 提示符：`> ` (cyan色加粗)
- 光标指示：`_` (gray色)
- Loading状态：显示"(正在处理...)"

### StatusBar组件 🆕 (v0.4.0增强)
- **错误显示**：❌ + red颜色
- **工具状态显示**：实时显示工具执行进度 🆕
  - "正在读取文件: example.md"
  - "正在抓取网页: https://example.com"
  - "文件读取完成"
- **默认提示**："准备就绪 - 输入消息并按回车发送"

## 交互流程设计 (v0.4.0更新)

### 消息处理流程
1. **用户输入** → 检查非空 → 添加用户消息
2. **设置Loading** → 更新状态栏 → 显示"正在与AI对话..."
3. **工具调用阶段** 🆕 → 实时状态更新 → 记录工具消息
   - 工具调用开始 → 添加工具调用消息
   - 工具执行过程 → 状态栏显示进度
   - 工具执行完成 → 添加工具结果消息
4. **AI回复** → 添加系统回复 → 完成状态

### 工具调用回调处理 🆕 (v0.4.0)
```typescript
const toolCallbacks: ToolCallbacks = {
  onStatusUpdate: (status: string) => {
    // 实时更新状态栏
    setAppState(prev => ({ ...prev, statusMessage: status }));
  },
  onToolCall: (toolName: string, args: any) => {
    // 添加工具调用消息到历史
    const argsStr = JSON.stringify(args, null, 2);
    addMessage(`调用工具: ${toolName}\n参数: ${argsStr}`, 'tool-call', toolName, args);
  },
  onToolResult: (toolName: string, result: any) => {
    // 添加工具结果消息到历史
    const resultStr = formatToolResult(result);
    addMessage(resultStr, 'tool-result', toolName);
  }
};
```

### 键盘事件处理
- **Enter键**：提交消息 (仅当输入非空时)
- **Backspace键**：删除字符 + 更新光标位置
- **普通输入**：追加字符 + 更新光标位置
- **Loading期间**：禁用所有输入

## 状态管理模式 (v0.4.0更新)

### AppState接口设计
```typescript
interface AppState {
  messages: Message[];      // 消息历史 (包含工具消息)
  currentInput: string;     // 当前输入 (已废弃，由InputBox内部管理)
  isLoading: boolean;       // 加载状态
  statusMessage: string;    // 状态消息 (包含工具状态)
  error?: string;          // 错误信息
}
```

### Message接口设计 🆕 (v0.4.0扩展)
```typescript
interface Message {
  id: string;                              // 唯一标识 (使用时间戳)
  content: string;                         // 消息内容
  timestamp: Date;                         // 发送时间
  type: 'user' | 'system' | 'tool-call' | 'tool-result';  // 🆕 扩展消息类型
  toolName?: string;                       // 🆕 工具名称
  toolArgs?: Record<string, any>;          // 🆕 工具参数
}
```

### 消息历史过滤 🆕 (v0.4.0新增)
```typescript
// 为AI对话准备消息历史时，过滤掉工具消息
const chatHistory: ChatMessage[] = [
  ...appState.messages
    .filter(msg => msg.type === 'user' || msg.type === 'system') // 只包含对话消息
    .map(msg => ({
      role: msg.type === 'user' ? 'user' as const : 'assistant' as const,
      content: msg.content
    }))
];
```

## 视觉设计原则 (v0.4.0更新)
- **一致性**：所有边框使用相同的cyan色调
- **层次感**：通过颜色和图标区分不同类型消息
  - 用户消息：cyan (👤)
  - AI回复：green (🤖)  
  - 工具调用：yellow (🔧) 🆕
  - 工具结果：magenta (📋) 🆕
- **反馈性**：Loading状态、工具状态和错误状态有明确视觉指示
- **透明性**：工具调用过程完全可见，提升用户体验 🆕
- **简洁性**：避免过多装饰，保持终端界面的简洁美观
